import java.net.ServerSocket;
import java.net.UnknownHostException;
import java.io.IOException;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.OutputStream;
import java.util.*;
import org.micromanager.api.AcquisitionOptions;
import org.micromanager.navigation.*;
import java.util.Date;
import java.text.SimpleDateFormat;
import ij.process.*;
import ij.ImagePlus;
import ij.io.FileSaver;

/** BEHAVIOR IS SIMILAR TO LEICA CAM EXCEPT THAT STARTSCAN SHOULD NOT BE SENT AGAIN FOR CAMSCAN!!! */

int t = 0;
int exit = 0;

/** Initialization */
gui.closeAllAcquisitions();
gui.clearMessageWindow();

/** Scan folder */
ScanFolder = "D:/USERS/Seb/Experiment";
ImageName = "image";

/** Primary scan configuration */
NRow = 12;   			
NCol = 12;  
NX = 2;
NY = 2; 	
UStep = 1300; 	/** microns */
VStep = 1300; 	/** microns */		
XStep = 1000; 	/** microns */
YStep = 1000; 	/** microns */
XChip = 1344;
YChip = 1024;
AutoGrid = 1;	/** Overwrite XStep and YStep! */	
FlipXY = 0;
XSign = 1;
YSign = 1;

/** z-stacks */
nzStepslow = 1;	
zSteplow = 0; 			/** microns */
nzStepshigh = 9;		
zStephigh = 2; 		/** microns */
zOffHigh = 180;		/** microns */

/** Channels */
String[] channelslow = {"DAPI","GFP","Orange"};
String[] channelshigh = {"DAPI_high","GFP_high","Orange_high"};

/** Channel high ROI */
XRoi = 336;
YRoi = 256;
RoiWidth = 672;
RoiHeight = 512;

if(FlipXY == 1)
{
	buf = XSign;
	XSign = YSign;
	YSign = XSign;
}

/** Empty string */
String Astring = "";

/** Stage reference */
gui.enableLiveMode(true);
JOptionPane.showMessageDialog(null, "Please position the stage at upper left corner, then press OK\nMake sure the pixel calibration is correct!");
xystage = mmc.getXYStageDevice();
zstage = mmc.getFocusDevice();
xRef = mmc.getXPosition(xystage);
yRef = mmc.getYPosition(xystage);
zRef = mmc.getPosition(zstage);
gui.message("xRef " + xRef + " yRef "+ yRef + " zRef " + zRef);

/** AF map */
zOff = new float [NCol][NRow];
testFile = new File(ScanFolder+"/AFMap.txt").isFile();
if(!testFile)
{
	JOptionPane.showMessageDialog(null, "Upper left corner\nPlease adjust the focus, then press OK");
	zOff[0][0] = (float)mmc.getPosition(zstage);
	
	if(NCol>1)
	{
		mmc.setXYPosition(xystage,xRef+(NCol-1)*UStep,yRef);
		mmc.waitForDevice(xystage);
		JOptionPane.showMessageDialog(null, "Upper right corner\nPlease adjust the focus, then press OK");
		zOff[(NCol-1)][0] = (float)mmc.getPosition(zstage);
		/**zOff[(NCol-1)][0] = 10;*/
	}
	if(NRow>1)
	{
		mmc.setXYPosition(xystage,xRef,yRef+(NRow-1)*VStep);
		mmc.waitForDevice(xystage);
		JOptionPane.showMessageDialog(null, "Lower left corner\nPlease adjust the focus, then press OK");
		zOff[0][(NRow-1)] = (float)mmc.getPosition(zstage);
		/**zOff[0][(NRow-1)] = -12;*/
	}
	FileWriter fstream = new FileWriter(ScanFolder+"/AFMap.txt");
	BufferedWriter out = new BufferedWriter(fstream);
	out.write(Float.toString(zOff[0][0])+"\n");
	out.write(Float.toString(zOff[(NCol-1)][0])+"\n");
	out.write(Float.toString(zOff[0][(NRow-1)])+"\n");
	out.close();
}
else
{
	FileReader fr = new FileReader(ScanFolder+"/AFMap.txt");
	BufferedReader br = new BufferedReader(fr);
	zOff[0][0] = Float.valueOf(br.readLine());
	zOff[(NCol-1)][0] = Float.valueOf(br.readLine());
	zOff[0][(NRow-1)] = Float.valueOf(br.readLine());
	fr.close();
}
gui.enableLiveMode(false);

/** Compute and display z map */
print("Z map:");

for(y=0;y<NRow;y++)
{
	Str = "";
	for(x=0;x<NCol;x++)
	{	
		NRowOff = (zOff[0][(NRow-1)]-zOff[0][0])/(NRow-1)*y;
		NColOff = (zOff[(NCol-1)][0]-zOff[0][0])/(NCol-1)*x;
		if(NRow==1)NRowOff = 0;
		if(NCol==1)NColOff = 0;
		zOff[x][y] = zOff[0][0]+NRowOff+NColOff;
		Str = Str + zOff[x][y] + " ";
	}
	print(Str);
}

JOptionPane.showMessageDialog(null, "Is AF map ok?");

/** Initialize server socket */
print("Initiating server on port 8895...");
try 
{
	socketServer = new ServerSocket(8895);
} 
catch (IOException e) 
{
    System.out.println("Could not start server on port 8895");
    System.exit(-1);
}

while(exit == 0)
{
print("Waiting for incoming connection...");

/** Wait for incoming connection */
try 
{
	clientSocket = socketServer.accept();
} 
catch (IOException e) 
{
    System.out.println("Could not establish connection with client");
    System.exit(-1);
}

/** Open socket streams */
gui.message("Connection accepted (5s time out)...");
clientSocket.setSoTimeout(5000);
in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);

/** Send welcome message to client */
out.println("welcome");

/** Store incoming CAM commands */
String fromClient = null;
boolean test = false;
int mode = 0;
String [] CommandList = new String[1024]; /** 1024 CAM commands limit!! */
int cntcommands = 0;
while(test == false)
{
	try{
		fromClient = in.readLine();
	}
	catch (IOException e)
	{
		gui.message("Connection timed out, closing socket and exiting...");
		in.close();
		clientSocket.close();
		socketServer.close();
		Thread.stop();
	}
	CommandList[cntcommands] = fromClient;
	cntcommands++;
	test = (fromClient.indexOf("end") > -1);
	if(fromClient.indexOf("startscan") > -1)
	{
		mode = 1;
	}
	if(fromClient.indexOf("startcamscan") > -1)
	{
		mode = 2;
	}
	if(fromClient.indexOf("exit") > -1)
	{
		exit = 1;
	}
}

print("MODE: "+mode);

if(mode > 1)
{
print("CAM SCAN");

/** Generate TimeStamp */
Date dateNow = new Date ();
SimpleDateFormat formateddate = new SimpleDateFormat("yyyy_MM_dd_HH_mm_ss");
StringBuilder datestring = new StringBuilder( formateddate.format(dateNow) );
	
/** Create scan folder */
ScanSubFolder = "scan--"+datestring.toString();	
(new File(ScanFolder+"/"+ScanSubFolder)).mkdir();
CAMScanSubFolder = "CAM1--"+datestring.toString();
(new File(ScanFolder+"/"+ScanSubFolder+"/"+CAMScanSubFolder)).mkdir();

TIndex = Astring.format("%1$04d",new Object[]{t});

/** CAM SCAN */
mmc.setConfig("Channel", channelslow[0]);
mmc.waitForConfig("Channel", channelslow[0]);
PixSize = mmc.getPixelSizeUm();  /** Include binning and zoom, must be properly configured in MM*/
mmc.setConfig("Channel", channelshigh[0]);
mmc.waitForConfig("Channel", channelshigh[0]);
mmc.setROI(XRoi,YRoi,RoiWidth,RoiHeight);

NumHitPerWell = new int[NCol][NRow][NX][NY];
for(int i=0;i<cntcommands;i++)
{
	/**print(i);*/
	Buffer = CommandList[i];
	if(Buffer.indexOf("add")>0) 
	{
		ind = Buffer.indexOf("wellx");
		ind2 = Buffer.indexOf(" ",ind);
		Strwellx = Buffer.substring(ind+6,ind2); 
		wellx = Integer.parseInt( Strwellx );
		ind = Buffer.indexOf("welly");
		ind2 = Buffer.indexOf(" ",ind);
		Strwelly = Buffer.substring(ind+6,ind2); 
		welly = Integer.parseInt( Strwelly );
		ind = Buffer.indexOf("fieldx");
		ind2 = Buffer.indexOf(" ",ind);
		Strfieldx = Buffer.substring(ind+7,ind2); 
		fieldx = Integer.parseInt( Strfieldx );
		ind = Buffer.indexOf("fieldy");
		ind2 = Buffer.indexOf(" ",ind);
		Strfieldy = Buffer.substring(ind+7,ind2); 
		fieldy = Integer.parseInt( Strfieldy );
		ind = Buffer.indexOf("dxpos");
		ind2 = Buffer.indexOf(" ",ind);
		Strdxpos = Buffer.substring(ind+6,ind2); 
		dxpos = Integer.parseInt( Strdxpos );
		ind = Buffer.indexOf("dypos");
		Strdypos = Buffer.substring(ind+6,Buffer.length()); 
		dypos = Integer.parseInt( Strdypos );
		print(wellx+"/"+welly+"/"+fieldx+"/"+fieldy+"/"+dxpos+"/"+dypos);
	
		/** Acquire position */
		/** Channel loop */
		for (int c=0; c<channelshigh.length; c++) 
		{
			CIndex = Astring.format("%1$02d",new Object[]{c});
			gui.message("Channel config...");
			mmc.setConfig("Channel", channelshigh[c]);
			mmc.waitForConfig("Channel", channelshigh[c]);		

			/** Compute new stage position */
			xOffset = ((wellx-1) * UStep + (fieldx-1) * XStep + (dxpos-1)*PixSize)*XSign;
			yOffset = ((welly-1) * VStep + (fieldy-1) * YStep + (dypos-1)*PixSize)*YSign;
			if(FlipXY == 1)
			{
				buf = xOffset;
				xOffset = yOffset;
				yOffset = buf;
			}
			sx = xRef + xOffset;
			sy = yRef + yOffset;
				
			/** Move stage */
			gui.message("Move stage...");
			mmc.setXYPosition(xystage,sx,sy);
			mmc.waitForDevice(xystage);
	
			/** z loop */
			for (int z=0; z < nzStepshigh; z++) 
			{
					ZSliceIndex = Astring.format("%1$02d",new Object[]{z});
				
					/** Compute new z drive position */
					sz = zOffHigh + zOff[(wellx-1)][(welly-1)] + (z-Math.floor(nzStepshigh/2)) * zStephigh;

					/** Move z drive */
					gui.message("Move Z drive...");
					mmc.setPosition(zstage,sz);
					mmc.waitForDevice(zstage);
					      			
					/** Check current stage position and display it */
					xPosc = mmc.getXPosition(xystage);
					yPosc = mmc.getYPosition(xystage);
					zPosc = mmc.getPosition(zstage);
					gui.message(" "+xPosc+" "+yPosc+" "+zPosc);				
					gui.message("Acquiring frame " + t + ", channel " + channelslow[c] + " xPos " + xPosc + " yPos "+ yPosc + " zPos " + zPosc);
					
					/** Set parameters and capture image */
					gui.message("Snap...");
					mmc.snapImage();

					/** Copy captured image to ImagePlus structure */
					img = mmc.getImage();
					width = mmc.getImageWidth();
					height = mmc.getImageHeight();
					byteDepth = mmc.getBytesPerPixel();
					if (byteDepth == 1) 
					{
  					 ip = new ByteProcessor((int)width, (int)height);
  					 ip.setPixels(img);
					} 
					else if (byteDepth==2) 
					{
  					 ip = new ShortProcessor((int)width, (int)height);
					 ip.setPixels(img);
					} 
					else 
					{
					 console.message("Unknown byte depth.");
					}
					UIndex = Astring.format("%1$02d",new Object[]{wellx-1});
					VIndex = Astring.format("%1$02d",new Object[]{welly-1});
					XIndex = Astring.format("%1$02d",new Object[]{fieldx-1});
					YIndex = Astring.format("%1$02d",new Object[]{fieldy-1});
					if(NumHitPerWell[wellx-1][welly-1][fieldx-1][fieldy-1]==0)
					{
						FilePath = ScanFolder+"/"+ScanSubFolder+"/"+CAMScanSubFolder+"/"+ImageName+"--L0000--S00--U"+UIndex+"--V"+VIndex+"--J00--E00--O00--X"+XIndex+"--Y"+YIndex+"--T"+TIndex+"--Z"+ZSliceIndex+"--C"+CIndex+".ome.tif";
					}
					else 
					{
						SuppPos = Astring.format("%1$03d",new Object[]{NumHitPerWell[wellx-1][welly-1][fieldx-1][fieldy-1]});
						FilePath = ScanFolder+"/"+ScanSubFolder+"/"+CAMScanSubFolder+"/"+ImageName+"--L0000--S00--U"+UIndex+"--V"+VIndex+"--J00--E00--O00--X"+XIndex+"--Y"+YIndex+"--T"+TIndex+"--Z"+ZSliceIndex+"--C"+CIndex+"--"+SuppPos+".ome.tif";
					}
					ImagePlus imp = new ImagePlus(FilePath, ip);
					
					/** Save image to file */
					FileSaver fs = new FileSaver(imp);
					fs.saveAsTiff(FilePath);
			}
		}
		NumHitPerWell[wellx-1][welly-1][fieldx-1][fieldy-1] = NumHitPerWell[wellx-1][welly-1][fieldx-1][fieldy-1]+1;
	}
}

/** End of scan message */
out.println("XY scanfinished");

}

/** PRIMARY SCAN */
if(mode == 1)
{
	print("PRIMARY SCAN");
	/** Current time */
	now = System.currentTimeMillis();

	/** Generate TimeStamp */
	Date dateNow = new Date ();
	SimpleDateFormat formateddate = new SimpleDateFormat("yyyy_MM_dd_HH_mm_ss");
	StringBuilder datestring = new StringBuilder( formateddate.format(dateNow) );
	
	/** Create scan folder (one per timepoint) */
	ScanSubFolder = "scan--"+datestring.toString();	
	(new File(ScanFolder+"/"+ScanSubFolder)).mkdir();
	TIndex = Astring.format("%1$04d",new Object[]{t});

	/** Reset ROI */
	mmc.setConfig("Channel", channelslow[0]);
	mmc.waitForConfig("Channel", channelslow[0]);
	Binning = Integer.parseInt(mmc.getProperty(mmc.getCameraDevice(), "Binning"));
	mmc.setROI(0,0,XChip/Binning,YChip/Binning);

	/** AutoGrid */
	if(AutoGrid == 1)
	{
		PixSize = mmc.getPixelSizeUm();  /** Include binning and zoom, must be properly configured in MM*/
		ImgWidth = mmc.getImageWidth();
		ImgHeight = mmc.getImageHeight();
		XStep = PixSize*ImgWidth;
		YStep = PixSize*ImgHeight;
	}
	
	for (int u=0; u < NCol; u++) 
	{
	UIndex = Astring.format("%1$02d",new Object[]{u});
	for (int v=0; v < NRow; v++) 
	{
	VIndex = Astring.format("%1$02d",new Object[]{v});
	for (int x=0; x < NX; x++) 
	{
	XIndex = Astring.format("%1$02d",new Object[]{x});
	for (int y=0; y < NY; y++)
	{
	YIndex = Astring.format("%1$02d",new Object[]{y});

			/** Channel loop */
			for (int c=0; c<channelslow.length; c++) 
			{
				CIndex = Astring.format("%1$02d",new Object[]{c});
				gui.message("Channel config...");
				mmc.setConfig("Channel", channelslow[c]);
				mmc.waitForConfig("Channel", channelslow[c]);
				
				/** Compute new stage position */
				xOffset = (x*XStep + u*UStep)*XSign;
				yOffset = (y*YStep + v*VStep)*YSign;
				if(FlipXY == 1)
				{
					buf = xOffset;
					xOffset = yOffset;
					yOffset = buf;
				}
				sx = xRef + xOffset;
				sy = yRef + yOffset;
				
				/** Move stage */
				gui.message("Move stage...");
				mmc.setXYPosition(xystage,sx,sy);
				mmc.waitForDevice(xystage);	
				
				for (int z=0; z < nzStepslow; z++) 
				{
					ZSliceIndex = Astring.format("%1$02d",new Object[]{z});
				
					/** Compute new z drive position */
					sz = zOff[u][v] + (z-Math.floor(nzStepslow/2)) * zSteplow;

					/** Move z drive */
					gui.message("Move Z drive to "+sz);
					mmc.setPosition(zstage,sz);
					mmc.waitForDevice(zstage);
					      			
					/** Check current stage position and display it */
					xPosc = mmc.getXPosition(xystage);
					yPosc = mmc.getYPosition(xystage);
					zPosc = mmc.getPosition(zstage);			
					gui.message("Acquiring frame " + t + ", channel " + channelslow[c] + " xPos " + xPosc + " yPos "+ yPosc + " zPos " + zPosc);
					
					/** Set parameters and capture image */
					gui.message("Snap...");
					mmc.snapImage();

					/** Copy captured image to ImagePlus structure */
					img = mmc.getImage();
					width = mmc.getImageWidth();
					height = mmc.getImageHeight();
					byteDepth = mmc.getBytesPerPixel();
					if (byteDepth == 1) 
					{
  					 ip = new ByteProcessor((int)width, (int)height);
  					 ip.setPixels(img);
					} 
					else if (byteDepth==2) 
					{
  					 ip = new ShortProcessor((int)width, (int)height);
   					 ip.setPixels(img);
					} 
					else 
					{
   					console.message("Unknown byte depth.");
					}
					FilePath = ScanFolder+"/"+ScanSubFolder+"/"+ImageName+"--L0000--S00--U"+UIndex+"--V"+VIndex+"--J00--E00--O00--X"+XIndex+"--Y"+YIndex+"--T"+TIndex+"--Z"+ZSliceIndex+"--C"+CIndex+".ome.tif";
					ImagePlus imp = new ImagePlus(FilePath, ip);
					
					/** Save image to file */
					FileSaver fs = new FileSaver(imp);
					fs.saveAsTiff(FilePath);
				}
			}
	}
	}
	}
	}

	/** End of scan message */
	out.println("UVXY scanfinished");
}
 /** Update time frame counter */
if(mode == 1)
{
	t++;
}

gui.message("Move stage to reference...");
mmc.setXYPosition(xystage,xRef,yRef);
mmc.waitForDevice(xystage);
gui.message("Move Z drive to reference...");
mmc.setPosition(zstage,zOff[0][0]);
mmc.waitForDevice(zstage);

/** Reset ROI */
mmc.setConfig("Channel", channelslow[0]);
mmc.waitForConfig("Channel", channelslow[0]);
Binning = Integer.parseInt(mmc.getProperty(mmc.getCameraDevice(), "Binning"));
mmc.setROI(0,0,XChip/Binning,YChip/Binning);

}

/** Close connection */
print("Closing socket...");
in.close();
clientSocket.close();
socketServer.close();